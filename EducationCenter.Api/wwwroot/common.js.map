{"version":3,"sources":["webpack:///./src/app/shared/guards/student.guard.ts","webpack:///./src/app/student/services/student.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAA2C;AACiE;AAErD;AAKvD;IACE,sBAAoB,QAAqB,EAAU,MAAc;QAA7C,aAAQ,GAAR,QAAQ,CAAa;QAAU,WAAM,GAAN,MAAM,CAAQ;IAChE,CAAC;IACF,kCAAW,GAAX,UACE,IAA4B,EAC5B,KAA0B;QAC1B,IAAK,IAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAG;YAC1D,OAAO,IAAI,CAAC;SACb;aACI;YACH,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;SACvC;IAEH,CAAC;IAbU,YAAY;QAHxB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EAE8B,kEAAW,EAAkB,sDAAM;OADtD,YAAY,CAexB;IAAD,mBAAC;CAAA;AAfwB;;;;;;;;;;;;;;;;;;;;;;ACRkB;AAC0B;AAClB;AACb;AAEY;AAOlD;IAIE,wBAAoB,IAAgB,EAAU,MAAiB;QAA3C,SAAI,GAAJ,IAAI,CAAY;QAAU,WAAM,GAAN,MAAM,CAAW;QAFvD,YAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAE,SAAS,CAAC,CAAE;IAEgB,CAAC;IAEpE,oCAAW,GAAX;QACE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAY,IAAI,CAAC,OAAO,GAAG,cAAc,CAAC,CAAC,IAAI,CACjE,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACJ,CAAC;IAGD,uCAAc,GAAd,UAAe,EAAU;QACvB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAU,IAAI,CAAC,OAAO,IAAG,iBAAe,EAAI,EAAC,CAAC,IAAI,CACpE,4DAAK,CAAC,CAAC,CAAC,EACR,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC7B,CAAC;IACJ,CAAC;IAED,mCAAU,GAAV,UAAW,GAAwB;QACjC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAsB,IAAI,CAAC,OAAO,GAAG,aAAa,EAAE,GAAG,CAAC,CAAC,IAAI,CACjF,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC5B,CAAC;IACJ,CAAC;IAGA,iDAAwB,GAAxB,UAAyB,GAAY;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAU,IAAI,CAAC,OAAO,GAAG,aAAa,EAAE,GAAG,CAAC,CAAC,IAAI,CACpE,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAC5B,CAAC;IACN,CAAC;IAGD,oCAAW,GAAX,UAAY,KAAwB;QAClC,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;YACrC,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC1D;aAAM;YACL,OAAO,CAAC,KAAK,CACX,2BAAyB,KAAK,CAAC,MAAM,OAAI,IAAG,eAAa,KAAK,CAAC,KAAO,EACvE,CAAC;SACH;QACD,OAAO,uDAAU,CAAC,iDAAiD,CAAC,CAAC;IACvE,CAAC;IA3CU,cAAc;QAH1B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EAK0B,+DAAU,EAAkB,+DAAS;OAJpD,cAAc,CA4C1B;IAAD,qBAAC;CAAA;AA5C0B","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { DataService } from '../services/data.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentGuard implements CanActivate {\n  constructor(private _service: DataService, private router: Router)\n  {}\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean | UrlTree {\n    if ( this._service.isStudent && this._service.isLoggedIn$ ) {\n      return true;\n    }\n    else {\n      return this.router.parseUrl(\"/login\");\n    }\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { retry, catchError } from 'rxjs/operators';\nimport { throwError, of } from 'rxjs';\nimport { Student } from 'src/app/shared/models/student';\nimport { AppConfig } from 'src/app/config/config';\nimport { StudentRegistration } from 'src/app/shared/models/studentRegistration';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentService {\n\n  private pathAPI = this.config.setting[ 'PathAPI'] ;\n\n  constructor(private http: HttpClient, private config: AppConfig) { }\n\n  getStudents() {\n    return this.http.get<Student[]>(this.pathAPI + 'api/students').pipe(\n      catchError(this.handleError)\n    );\n  }\n\n\n  getStudentById(id: number) {\n    return this.http.get<Student>(this.pathAPI + `api/student/${id}`).pipe(\n      retry(3),\n      catchError(this.handleError)\n    );\n  }\n\n  addStudent(std: StudentRegistration) {\n    return this.http.post<StudentRegistration>(this.pathAPI + 'api/student', std).pipe(\n     catchError(this.handleError)\n    );\n  }\n\n\n   upatedStudentDescription(std: Student) {\n      return this.http.put<Student>(this.pathAPI + 'api/student', std).pipe(\n       catchError(this.handleError)\n      );\n  }\n\n\n  handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      console.error('An error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Backend returned code ${error.status}, ` + `body was: ${error.error}`\n      );\n    }\n    return throwError('Something bad happened; please try again later.');\n  }\n}\n"],"sourceRoot":""}